{"ast":null,"code":"var _jsxFileName = \"/Users/alicewon/Development/code/mod4project/new_pet_sitter_frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport HomepageLayout from './HomepageLayout';\nimport NavBar from './NavBar';\nimport LoginSignupContainer from './LoginSignupContainer';\nimport MyProfile from './MyProfile';\nimport SignupForm from './SignupForm';\nimport PetsContainer from './PetsContainer';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nconst ownersURL = \"http://localhost:3000/owners\";\nconst petsURL = \"http://localhost:3000/pets\";\nconst notesURL = \"http://localhost:3000/notes\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getAllOwners = () => {\n      fetch(ownersURL).then(res => res.json()).then(owners => this.setState({\n        owners: owners\n      }));\n    };\n\n    this.getFreshPets = () => {\n      fetch(petsURL).then(res => res.json()).then(pets => this.filterFreshPets(pets));\n    };\n\n    this.filterFreshPets = pets => {\n      let filteredPets = pets.map(pet => {\n        console.log(pet.owner.address);\n        console.log(this.props);\n      }); // pet.owner.id == this.props.user.id)\n    };\n\n    this.updatePets = pet => {\n      console.log(\"working\");\n      let newPetsArray = this.state.pets.push(pet);\n      this.setState({\n        pets: newPetsArray\n      });\n    };\n\n    this.onLogInUser = username => {\n      console.log(username);\n      this.getAllOwners(username);\n      let ownersfiltered = this.state.owners.filter(owner => owner.name == username);\n      this.setState({\n        isLoggedIn: true,\n        user: ownersfiltered,\n        //might cause problem for edge case of multiple sign ups in a row:\n        newSignup: false\n      });\n      console.log(ownersfiltered);\n      this.setLocalStorage(ownersfiltered[0]);\n    };\n\n    this.setLocalStorage = user => {\n      localStorage.setItem('user', JSON.stringify(user)); // let localUserId = localStorage.getItem('user').id\n    };\n\n    this.localUser = () => {\n      let user = JSON.parse(localStorage.getItem('user'));\n      return user;\n    };\n\n    this.addUser = owner => {\n      this.setState(prevState => {\n        return {\n          owners: [...prevState.owners, owner],\n          newSignup: true\n        };\n      }, () => this.postOwner(owner));\n    };\n\n    this.postOwner = owner => {\n      fetch(ownersURL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(owner)\n      }).then(res => res.json()).then(data => console.log(data));\n    };\n\n    this.postPet = pet => {\n      console.log(this.localUser());\n      fetch(petsURL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pet: { ...pet,\n            owner_id: this.props.user.id\n          }\n        })\n      }).then(res => res.json()).then(data => this.getFreshPets()); // this.setState({...this.state, currentUserPets: this.state.currentUserPets.push(pet)}))\n    };\n\n    this.showPets = () => {\n      return this.localUser().pets;\n    };\n\n    this.state = {\n      owners: [],\n      isLoggedIn: false,\n      newSignup: false,\n      user: [{}],\n      pets: [{}] // currentUserPets: []\n      // user: [{\n      //   id: 8, \n      //   name: \"Mario\", \n      //   address: \"657 Waters Mall\", \n      //   user_image: \"https://picsum.photos/seed/jbmdqaufloldlkmoprrgfznagbhtfyapkhoflpvklyjbduohcq/250\", \n      //   background_image: \"https://picsum.photos/seed/jbmdqaufloldlkmoprrgfznagbhtfyapkhoflpvklyjbduohcq/250\"\n      // }]\n\n    };\n  }\n\n  componentDidMount() {\n    this.getAllOwners();\n    this.getFreshPets();\n    fetch(petsURL).then(res => res.json()).then(pets => this.setState({ ...this.state,\n      pets: pets\n    }));\n  }\n\n  render() {\n    console.log(this.state.pets);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, console.log(this.localUser().pets), React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      render: () => React.createElement(HomepageLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/login\",\n      exact: true,\n      render: () => React.createElement(LoginSignupContainer, {\n        onLogInUser: this.onLogInUser,\n        loggedInState: this.state.isLoggedIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/signup\",\n      exact: true,\n      render: () => React.createElement(SignupForm, {\n        onAddUser: this.addUser,\n        newSignUpState: this.state.newSignup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/profile\",\n      exact: true,\n      render: () => React.createElement(MyProfile, {\n        updatePets: this.updatePets,\n        user: this.localUser(),\n        postPet: this.postPet,\n        pets: this.getFreshPets,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alicewon/Development/code/mod4project/new_pet_sitter_frontend/src/App.js"],"names":["React","HomepageLayout","NavBar","LoginSignupContainer","MyProfile","SignupForm","PetsContainer","BrowserRouter","Router","Route","ownersURL","petsURL","notesURL","App","Component","constructor","getAllOwners","fetch","then","res","json","owners","setState","getFreshPets","pets","filterFreshPets","filteredPets","map","pet","console","log","owner","address","props","updatePets","newPetsArray","state","push","onLogInUser","username","ownersfiltered","filter","name","isLoggedIn","user","newSignup","setLocalStorage","localStorage","setItem","JSON","stringify","localUser","parse","getItem","addUser","prevState","postOwner","method","headers","body","data","postPet","owner_id","id","showPets","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport HomepageLayout from './HomepageLayout'\nimport NavBar from './NavBar'\nimport LoginSignupContainer from  './LoginSignupContainer'\nimport MyProfile from './MyProfile'\nimport SignupForm from './SignupForm'\nimport PetsContainer from './PetsContainer'\n\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nconst ownersURL = \"http://localhost:3000/owners\"\nconst petsURL = \"http://localhost:3000/pets\"\nconst notesURL = \"http://localhost:3000/notes\"\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state ={\n      owners: [],\n      isLoggedIn: false,\n      newSignup: false,\n      user: [{}],\n      pets: [{}]\n      // currentUserPets: []\n      \n      // user: [{\n        //   id: 8, \n        //   name: \"Mario\", \n        //   address: \"657 Waters Mall\", \n        //   user_image: \"https://picsum.photos/seed/jbmdqaufloldlkmoprrgfznagbhtfyapkhoflpvklyjbduohcq/250\", \n        //   background_image: \"https://picsum.photos/seed/jbmdqaufloldlkmoprrgfznagbhtfyapkhoflpvklyjbduohcq/250\"\n        // }]\n      }\n    }\n  \n \n  componentDidMount() {\n    this.getAllOwners()\n    this.getFreshPets()\n\n    fetch(petsURL)\n    .then(res => res.json())\n    .then(pets => this.setState({...this.state, pets: pets}))\n  }\n\n  getAllOwners = () => {\n    fetch(ownersURL)\n    .then(res => res.json())\n    .then(owners => this.setState({ owners: owners}))\n  }\n\n  getFreshPets = () => {\n    fetch(petsURL)\n    .then(res => res.json())\n    .then(pets => this.filterFreshPets(pets))\n  }\n\n\n  filterFreshPets = (pets) => {\n    let filteredPets = pets.map(pet => {\n      console.log(pet.owner.address)\n      console.log(this.props)\n     \n    })\n\n    // pet.owner.id == this.props.user.id)\n\n  }\n\n\n  // form for add pets: onsubmit -> post new pet to database\n  // at the end of the .then, take the JSON data (newpet) call a function to:\n  // query the database for the pet (getfreshpets) that match the user id (from props.user), send those to PetContainer\n  // in petContainer -> filter over freshpets and create a PetCard for each \n \n  \n  updatePets = (pet) => {\n    console.log(\"working\")\n    let newPetsArray = this.state.pets.push(pet)\n    this.setState({\n      pets: newPetsArray\n    })\n  }\n  // Login Feature, save state as user\n  onLogInUser = (username) => {\n    console.log(username)\n    this.getAllOwners(username)\n    let ownersfiltered = this.state.owners.filter(owner => owner.name == username)\n    this.setState({isLoggedIn: true, \n      user: ownersfiltered,\n      //might cause problem for edge case of multiple sign ups in a row:\n      newSignup: false})\n      console.log(ownersfiltered)\n      this.setLocalStorage(ownersfiltered[0])\n    }\n    \n    setLocalStorage = (user) => {\n      localStorage.setItem('user', JSON.stringify(user))\n      // let localUserId = localStorage.getItem('user').id\n    }\n\n    localUser = () => {\n      let user = JSON.parse(localStorage.getItem('user'))\n      return user\n    }\n\n//Sign Up Feature: Adding User to state of owners\n  addUser = owner => {\n    this.setState(prevState => {\n      return {\n        owners: [...prevState.owners, owner],\n        newSignup: true\n      }\n    }, () => this.postOwner(owner))\n  }\n\n//Sign Up Feature: POSTING User to Database\n  postOwner = (owner) => {\n    fetch(ownersURL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(owner)\n    }).then(res => res.json())\n      .then(data => console.log(data))\n  }\n\n  postPet = (pet) => { \n    console.log(this.localUser())\n     fetch(petsURL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        pet: {...pet, owner_id: this.props.user.id}\n      })\n    }).then(res => res.json())\n      .then(data => this.getFreshPets())\n      // this.setState({...this.state, currentUserPets: this.state.currentUserPets.push(pet)}))\n  }\n\n\n  // this.state.currentUserPets[0]\n  // renderOwnersProfile = (firstName) => {\n  //   console.log(firstName)\n  //   fetch(ownersURL)\n  //   .then(res => res.json())\n  //   .then(owners => console.log(owners))\n  // }\n\n  // handleOnLogIn = () => {\n  //   console.log(\"ello mate\")\n  // }\n\n  \n\n\n//SUGGESTIONS\n  // Global User object or Id\n  // API calls that collect pets only\n  // set up your components to account for the async pet loading, something in the meantime to load\n\n  showPets = () => {return this.localUser().pets}\n\n\n  render() {\n    console.log(this.state.pets)\n    return (\n      <div>\n        {console.log(this.localUser().pets)}\n        <Router>\n          <NavBar />\n\n          <Route\n            path=\"/\"\n            exact\n            render={() => <HomepageLayout />}\n          />\n                \n           <Route\n            path=\"/login\"\n            exact\n            render={() => \n            <LoginSignupContainer onLogInUser={this.onLogInUser } loggedInState={this.state.isLoggedIn}/>}\n          />\n        \n        <Route\n          path=\"/signup\"\n          exact\n          render={()=> <SignupForm onAddUser={this.addUser} newSignUpState={this.state.newSignup}/>}\n        />\n        \n        <Route\n          path=\"/profile\"\n          exact\n          render={() => <MyProfile  updatePets={this.updatePets} user={this.localUser()} postPet={this.postPet} pets={this.getFreshPets}/>}\n        />\n\n        {/* <Route \n          path=\"/pet\"\n          exact\n          render={() => <PetsContainer user={this.localUser()} pets={this.showPets()} postPet={this.postPet}/>}\n        /> */}\n          \n\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}